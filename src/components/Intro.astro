---
import Badge from '../components/Badge.astro';
import LinkedInIcon from "../icons/LinkedIn.astro";
import SocialPill from '../icons/SocialPill.astro';
import GitHubIcon from '../icons/GitHub.astro';
import Dropdown from '../components/Dropdown.astro';
import MapIcon from '../icons/map.astro';
import MailIcon from '../icons/Mail.astro';
---


<div class="w-full lg:w-1/2 xl:w-2/5 flex flex-col items-center p-4 hidden-on-scroll" >
    <img 
    src="assets/1644039.jpg"  
    alt="Foto de Abel Cristofer" 
    class="w-full sm:w-1/4 lg:w-3/4 rounded-full  aspect-[7/8] object-cover mb-4 border-2 border-slate-600 dark:border-slate-200">
    
        <nav class="flex gap-4 mt-8 flex-wrap justify-center text-white">
            <SocialPill href="https://www.linkedin.com/in/abel-cristofer-hernández-bustos-102413128/" title="LinkedIn">
                <LinkedInIcon class="size-4 md:size-4" />
                LinkedIn
            </SocialPill>
            <SocialPill href="https://github.com/Cristofer3097" title="GitHub">
                <GitHubIcon class="size-4 md:size-4" />
                GitHub
            </SocialPill>
            <div class="flex space-x-1 lg:space-x-2">
                <SocialPill href="mailto:cristofer3097@gmail.com" title="Email">
                    <MailIcon class="size-4 md:size-5" />
                    cristofer3097@gmail.com
                </SocialPill>
            </div>
        </nav>
</div>    
<div class="top-10 lg:relative lg:top-10 w-full lg:w-3/4 ml-10 flex flex-col justify-start hidden-on-scroll">
    <h1 class="text-2xl text-wrap lg:text-3xl font-bold flex flex-row gap-x-5 pb-2 text-violet-600">
        Abel Cristofer
        <div class="flex justify-center items-center">
            <a href="https://www.linkedin.com/in/abel-cristofer-hernández-bustos-102413128/" title="LinkedIn" target="_blank" rel="noopener noreferrer" class="flex justify-center items-center">
                <Badge />
            </a>
        </div>    
    </h1>
    <h1 class="text-gray-200 text-2xl text-wrap lg:text-3xl font-bold flex flex-row gap-x-2" >
        Desarrollador <span id="changing-text" class="text-violet-600"></span><span id="typed-cursor" class="typed-cursor">|</span>

    </h1>
    <h1 class="text-gray-500 text-wrap lg:text-1xl font-bold flex flex-row gap-x-2 pb-2 lg:pb-5">
        <MapIcon class="2" />Nuevo Leon, Mexico 
    </h1>
    <h2 class="text-lg lg:text-xl opacity-80 text-gray-50 text-wrap">
        Con más de 2 años de experiencia. 
        <span class="text-violet-500">Desarrollador en Full-Stack, Backend y en Apps Realidad Aumentada.</span> 
        Disfruto enfrentar nuevos retos, trabajar en proyectos multidisciplinarios para aportar valor a través de la tecnología y aportar soluciones creativas que no solo resuelvan problemas de manera eficiente, sino que también generen valor estratégico a largo plazo.
    </h2>
    <div class="flex justify-center items-center py-4 lg:py-8">
        <Dropdown />
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const textElement = document.getElementById("changing-text");
        const cursorElement = document.getElementById("typed-cursor");
        const words = ["Full-Stack","Frontend", "Backend", "Apps AR", "Web"];
        let wordIndex = 0;
        let charIndex = 0;
        let isDeleting = false;
        
        function typeEffect() {
            const currentWord = words[wordIndex];
            
            if (isDeleting) {
                textElement.textContent = currentWord.substring(0, charIndex - 1);
                charIndex--;
            } else {
                textElement.textContent = currentWord.substring(0, charIndex + 1);
                charIndex++;
            }

            let typingSpeed = isDeleting ? 50 : 100;

            // Cuando termina de escribir, activa el parpadeo del cursor antes de borrar
            if (!isDeleting && charIndex === currentWord.length) {
                cursorElement.classList.add("blinking");
                setTimeout(() => {
                    isDeleting = true;
                    cursorElement.classList.remove("blinking");
                    typeEffect();
                }, 2000); // Espera antes de borrar
                return;
            }

            // Cuando termina de borrar, cambia de palabra
            if (isDeleting && charIndex === 0) {
                isDeleting = false;
                wordIndex = (wordIndex + 1) % words.length;
                typingSpeed = 500; // Pausa antes de escribir la siguiente palabra
            }

            setTimeout(typeEffect, typingSpeed);
        }

        typeEffect();
    });

    document.addEventListener("DOMContentLoaded", () => {
        const elements = document.querySelectorAll(".hidden-on-scroll");
    
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("visible-on-scroll");
                } else {
                    entry.target.classList.remove("visible-on-scroll");
                }
            });
        }, { threshold: 0.3 }); 
    
        elements.forEach(el => observer.observe(el));
    });
</script>
<style>
    .typed-cursor {
        animation: blink 1s step-end infinite;
    }

    @keyframes blink {
        50% { opacity: 0; }
    }
    .hidden-on-scroll {
            opacity: 0;
            transform: translateY(30px);
            transition: opacity 0.8s ease-out, transform 1.0s ease-out;
        }
        
  
        .visible-on-scroll {
            opacity: 1;
            transform: translateY(0);
        }
</style>